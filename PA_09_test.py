from PA_09 import *
import unittest

class Test(unittest.TestCase):

	def test_base(self):
		self.assertEqual(evaluate("1+(1+1)*(1+1)"), (5, 1))
		self.assertEqual(evaluate("1*(1+1)+(1+1)"), (4, 1))
		self.assertEqual(evaluate("{1+1}*[1+1]+38"), (42, 1))
		self.assertEqual(evaluate("[{1}+5]*({2}+[{1*(3)}+2])"), (42, 4))

	def test_advanced(self):
		self.assertEqual(evaluate("1"), (1, 0))
#		self.assertEqual(evaluate("000000000002"), (2, 0))
		self.assertEqual(evaluate("(3)"), (3, 1))
		self.assertEqual(evaluate("((3))"), (3, 2))
		self.assertEqual(evaluate("1+2"), (3, 0))
		self.assertEqual(evaluate("1*2"), (2, 0))
		self.assertEqual(evaluate("(((3+2)))"), (5, 3))
		self.assertEqual(evaluate("1*2+3"), (5, 0))
		self.assertEqual(evaluate("1*2+3*4"), (14, 0))
#		self.assertEqual(evaluate("011*234+356*487"), (175946, 0))
		self.assertEqual(evaluate("1*(2+(3+4))"), (9, 2))
		self.assertEqual(evaluate("1*(2+3)"), (5, 1))
		self.assertEqual(evaluate("1*(2*(3*4))"), (24, 2))
		self.assertEqual(evaluate("1*(2*(3+4))"), (14, 2))
#		self.assertEqual(evaluate("011*(234+356)*487"), (3160630, 1))
		self.assertEqual(evaluate("3+(5*((3+2)*3))"), (78, 3))
		self.assertEqual(evaluate("3+(5*(((3)+2)*3))"), (78, 4))
		self.assertEqual(evaluate("3+(5*(((3)+(2))*3))"), (78, 4))
		self.assertEqual(evaluate("3+(5*(4+((3)+(2))*3))"), (98, 4))
		self.assertEqual(evaluate("3+(5*(4+3*((3)+(2))*3))"), (248, 4))
		self.assertEqual(evaluate("2*(((3+4)*5)+3)"), (76, 3))
		self.assertEqual(evaluate("2*(((3+4)*5)+(5*(2+(4+3))))"), (160, 4))

	def test_exceptions(self):
		with self.assertRaises(Exception) as cm: evaluate("")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("Hallo")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("asdf")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
#		with self.assertRaises(Exception) as cm: evaluate("1 + 1")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("{3+2)+1")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("*3+2+1")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("3*+2+1")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("3+*2+1")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("3*")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("3*2*")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("2++2")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("++2")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("2++")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("+2")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
#		with self.assertRaises(Exception) as cm: evaluate("(+2)")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("+")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("*")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("1+1)")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate(")")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("(")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("()")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate(")(")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate(")7(")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("7(7)")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("(7(7))")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("(7)7")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("((7)7)")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("(7)(7)")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate(".")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
#		with self.assertRaises(Exception) as cm: evaluate("(+2)")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("-1")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("-")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("_")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate(" ")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("2.5")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("2-5")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("2/5")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))
		with self.assertRaises(Exception) as cm: evaluate("2'5")
		self.assertEqual("syntaktisch inkorrekt", str(cm.exception))

if __name__ == "__main__":
    unittest.main()